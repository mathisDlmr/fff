name: "Build and push IMAGE"
description: "Build docker image and push it to ACR (with semver tagging via semantic-release)"

inputs:
  local-path:
    description: "Path where the dockerfile is located"
    required: true
  dockerfile:
    description: "Dockerfile to use"
    default: "Dockerfile"
    required: false
  image-path:
    description: "Path where the image will be pushed"
    required: true
  should-tag-latest:
    description: "Boolean set to true if the latest tag should be applied to the image"
    required: false
  platforms:
    description: "architecture for the build (linux/amd64,linux/arm64,linux/arm/v7)"
    required: true
  github-token:
    description: "GitHub token for release"
    required: true

runs:
  using: "composite"
  steps:
    - name: Run release-please
      id: release_please
      uses: googleapis/release-please-action@v4
      with:
        token: ${{ inputs.github-token }}
        path: ${{ inputs.local-path }}
        release-type: "simple"
        include-component-in-tag: true
        include-v-in-tag: true
        skip-labeling: true

    - name: Get release information once release-please PR is merged
      id: get_release
      if: ${{ steps.release_please.outputs.releases_created }}
      shell: bash
      run: |       
        NEW_VERSION="${{ steps.release_please.outputs.version }}"
        NEW_TAG="${{ inputs.image-path }}-v$NEW_VERSION"
        echo "new_version=$NEW_VERSION" >> $GITHUB_ENV
        echo "new_tag=$NEW_TAG" >> $GITHUB_ENV

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v3
      with:
        platforms: ${{ inputs.platforms }}

    - name: Login to ACR
      shell: bash
      if: ${{ steps.release_please.outputs.releases_created }}
      run: |
        echo "Logging in to ACR"

    # - name: Login to ACR
    #   uses: azure/docker-login@v2
    #   if: ${{ steps.release_please.outputs.releases_created }}
    #   with:
    #     login-server: ${{ inputs.acr-host }}
    #     username: ${{ inputs.acr-push-user }}
    #     password: ${{ inputs.acr-push-password }}

    - name: "compute tags"
      if: ${{ steps.release_please.outputs.releases_created }}
      shell: bash
      run: |
        VERSIONS="${{ env.new_version }}"
        TAGS="${{ inputs.acr-host }}/${{ inputs.image-path }}:${{ github.sha }}"
        for VERSION in ${VERSIONS//,/ } ; do 
          TAGS="$TAGS,${{ inputs.acr-host }}/${{ inputs.image-path }}:$VERSION"
        done
        if [ "${{ inputs.should-tag-latest }}" = "true" ]; then 
          TAGS="$TAGS,${{ inputs.acr-host }}/${{ inputs.image-path }}:latest"
        fi
        echo TAGS="$TAGS" >> $GITHUB_ENV

    - name: Build (no push)
      uses: docker/build-push-action@v5
      if: ${{ !steps.release_please.outputs.releases_created }}
      with:
        context: ${{ inputs.local-path }}
        platforms: ${{ inputs.platforms }}
        push: false
        file: ${{ inputs.local-path }}/${{ inputs.dockerfile }}

    - name: Build and push
      if: ${{ !steps.release_please.outputs.releases_created }}
      shell: bash
      run: |
        echo "Building and pushing image"
        echo "PUSH: true"

    # - name: Build and push
    #   uses: docker/build-push-action@v5
    #   if: ${{ steps.release_please.outputs.releases_created }}
    #   with:
    #     context: ${{ inputs.local-path }}
    #     build-args: |
    #       AZDO_NPM_REGISTRY_PULL_TOKEN="${{ inputs.azdo-pull-token }}"
    #       PG_VERSION=${{ inputs.pg-version }}
    #       NODE_VERSION=${{ inputs.node-version }}
    #       ES_VERSION=${{ inputs.es-version }}
    #     platforms: ${{ inputs.platforms }}
    #     push: true
    #     tags: ${{ env.TAGS }}
    #     file: ${{ inputs.local-path }}/${{ inputs.dockerfile }}

    # - name: Sysdig secure scan
    #   if: ${{ inputs.sysdig-api-token != '' && steps.release_please.outputs.releases_created }}
    #   uses: sysdiglabs/scan-action@v5
    #   with:
    #     image-tag: ${{ inputs.acr-host }}/${{ inputs.image-path }}:${{ github.sha }}
    #     # API token for Sysdig Scanning auth
    #     sysdig-secure-token: ${{ inputs.sysdig-api-token }}
    #     sysdig-secure-url: "https://eu1.app.sysdig.com"
    #     registry-user: ${{ inputs.acr-push-user }}
    #     registry-password: ${{ inputs.acr-push-password }}
    #     # dockerfile-path: ${{ inputs.local-path }}
    #     # input-type: docker-daemon
    #     ignore-failed-scan: true
