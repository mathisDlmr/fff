name: "Build and push IMAGE"
description: "Build docker image and push it to ACR (with semver tagging via semantic-release)"

inputs:
  local-path:
    description: "Path where the dockerfile is located"
    required: true
  dockerfile:
    description: "Dockerfile to use"
    default: "Dockerfile"
    required: false
  image-path:
    description: "Path where the image will be pushed"
    required: true
  should-tag-latest:
    description: "Boolean set to true if the latest tag should be applied to the image"
    required: false
  platforms:
    description: "architecture for the build (linux/amd64,linux/arm64,linux/arm/v7)"
    required: true
  github-token:
    description: "GitHub token for release"
    required: true
  base-tag:
    description: "Base version tag used to namespace image (ex: v2.10)"
    required: false

runs:
  using: "composite"
  steps:
    - name: Run release-please
      id: release_please
      uses: googleapis/release-please-action@v4
      with:
        config-file: ${{ inputs.local-path }}/.release-please-config.json
        manifest-file: ${{ inputs.local-path }}/.release-please-manifest.json
        token: ${{ inputs.github-token }}

    - name: Get release information once release-please PR is merged
      id: get_release
      if: ${{ steps.release_please.outputs.release_created || github.ref_name != 'main' }}
      shell: bash
      run: |       
        NEW_VERSION="${{ steps.release_please.outputs.version }}"
        BASE_TAG="${{ inputs.base-tag }}"                                # Les tags des images officielles utilisées
        
        if [ ${{github.ref_name}} != "main" ]; then
          CLEAN_BRANCH_NAME=$(echo ${{github.ref_name}} | sed 's/[^a-zA-Z0-9._-]/-/g' | tr '[:upper:]' '[:lower:]')
          IMAGE_NAME="${{ inputs.image-path }}${BASE_TAG:+-$BASE_TAG}-$CLEAN_BRANCH_NAME"
        else
          IMAGE_NAME="${{ inputs.image-path }}${BASE_TAG:+-$BASE_TAG}"
        fi
        NEW_TAG="${IMAGE_NAME}:v${NEW_VERSION}"                          # Tag final (nom + images officielles + version Padoa)

        echo "new_version=$NEW_VERSION" >> $GITHUB_ENV
        echo "image_name=$IMAGE_NAME" >> $GITHUB_ENV
        echo "new_tag=$NEW_TAG" >> $GITHUB_ENV
        echo "branch_name=$BRANCH_NAME" >> $GITHUB_ENV
        echo "clean_branch_name=$CLEAN_BRANCH_NAME" >> $GITHUB_ENV

    - name: Fix release-please release and tagging
      if: ${{ steps.release_please.outputs.release_created }}
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
      run: |
        gh release edit ${{ steps.release_please.outputs.tag_name }} --title "${{ env.new_tag }}" 

    - name: "compute tags"
      if: ${{ steps.release_please.outputs.release_created || github.ref_name != 'main' }}
      shell: bash
      run: |
        TAGS="${{ inputs.acr-host }}/${{ env.image_name }}:${{ github.sha }}"        
        if [ -n "${{ env.new_version }}" ]; then
          TAGS="$TAGS,${{ inputs.acr-host }}/${{ env.image_name }}:v${{ env.new_version }}"
        fi
        if [ "${{ inputs.should-tag-latest }}" = "true" ] && [ "${{ env.branch_name }}" = "main" ]; then 
          TAGS="$TAGS,${{ inputs.acr-host }}/${{ env.image_name }}:latest"
        fi
        echo TAGS="$TAGS" >> $GITHUB_ENV

    - name: Set up QEMU
      if: ${{ steps.release_please.outputs.release_created || github.ref_name != 'main' }}
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      id: buildx
      if: ${{ steps.release_please.outputs.release_created || github.ref_name != 'main' }}
      uses: docker/setup-buildx-action@v3
      with:
        platforms: ${{ inputs.platforms }}

    - name: Simulate build and push
      if: ${{ steps.release_please.outputs.release_created || github.ref_name != 'main' }}
      shell: bash
      run: |
        echo "L'image a été publiée sous le nom ${{ inputs.acr-host }}/${{ env.image_name }}:v${{ env.new_version }}"
        echo "Les tags sont : ${{ env.TAGS }}"
    
    - name: Give Image name
      if: ${{ steps.release_please.outputs.release_created || github.ref_name != 'main' }}
      shell: bash
      run: |
        echo "L'image a été publiée sous le nom ${{ inputs.acr-host }}/${{ env.image_name }}:v${{ env.new_version }}"
