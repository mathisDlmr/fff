import requests
import json
from os import environ as env
from sys import exit
from datetime import datetime, timedelta


BASE_URL = 'https://services.nvd.nist.gov/rest/json/cves/2.0'

# TIMEDELTA_CONFIG string in the format "DAYS HOURS MINUTES SECONDS"
TIMEDELTA_CONFIG = env.get('TIMEDELTA_CONFIG')
if not TIMEDELTA_CONFIG:
    print('[INFO] Undefined TIMEDELTA_CONFIG - Using default timedelta instead (every hour)')
    TIMEDELTA_CONFIG = '0 1 0 0'

SLACK_WEBHOOK = env.get('SLACK_WEBHOOK')
if not SLACK_WEBHOOK:
    exit('[ERROR] Could not read SLACK_WEBHOOK from environment')

SLACK_CHANNEL = env.get('SLACK_CHANNEL')
if not SLACK_CHANNEL:
    exit('[ERROR] Could not read SLACK_CHANNEL from environment')

CPE_LIST = env.get('CPE_LIST')
if not CPE_LIST:
    exit('[ERROR] Could not read CPE_LIST from environment')

def format_query(base, keyword, pubStartDate):
    res = base + '?keywordSearch=' + keyword.lower()
    res += '&pubStartDate=' + pubStartDate.strftime('%Y-%m-%dT%H:%M:%S') + 'Z'
    res += '&pubEndDate=' + datetime.now().strftime('%Y-%m-%dT%H:%M:%S') + 'Z'
    return res

def post_slack_alert(webhook, payload):
    r = requests.post(webhook, data={ "payload": json.dumps(payload) })
    print(r, payload)


def get_cve_from_cpe(cpe, pubStartDate):
    query = format_query(BASE_URL, cpe, pubStartDate)
    res = requests.get(query)
    return json.loads(res.text)


if __name__ == "__main__":
    maxAge = [int(t) for t in TIMEDELTA_CONFIG.split()]
    pubStartDate = datetime.now() - timedelta(days=maxAge[0], hours=maxAge[1], minutes=maxAge[2], seconds=maxAge[3])

    for cpe in CPE_LIST.split():
        data = get_cve_from_cpe(cpe, pubStartDate)

        if not data['totalResults']:
            continue

        for cve_item in data['vulnerabilities']:
            cve_id = cve_item['cve']['id']
            description = cve_item['cve']['descriptions'][0]['value']
            date = cve_item['cve']['published']
            try:
                metrics = cve_item['cve']['metrics']['cvssMetricV31'][0]['cvssData']
                cve_category = metrics['baseSeverity']
                cve_score = metrics['baseScore']
            except:
                cve_category = "UNDEFINED"
                cve_score = "UNDEFINED"

            if cve_category != "HIGH" and cve_category != "CRITICAL":
                continue
            text = f'A new *{cve_category}* ({cve_score}) vulnerability has been found for *{cpe}* with ID {cve_id}\n'
            text += f'Date: {date}\n'
            text += f'CVE Details: https://nvd.nist.gov/vuln/detail/{cve_id}\n'

            # text = f'New CVE Alert!\n'
            # text += f'Product: {cpe}\n'
            # text += f'ID: {cve_id}\n'
            # text += f'Description: {description}\n'
            # text += f'Date: {date}\n'
            # text += f'CVE Details: https://nvd.nist.gov/vuln/detail/{cve_id}\n'


            payload = {
                "channel": SLACK_CHANNEL,
                "text": text,
                "icon_emoji": ":warning:",
            }

            post_slack_alert(SLACK_WEBHOOK, payload)
